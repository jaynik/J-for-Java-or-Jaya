/* Linked List Implementation - Insert element at start, at given position and at the end */
package com.datastructs.LL;

public class Node {
	int data;
	Node next;
}
package com.datastructs.LL;

public class LinkedLi {
	
	Node head;
	
	public void insertbegin(int data)
	{
		Node n=new Node();
		n.data=data;
		n.next=null;
		
		if(head==null)
		{
			head=n;
		}
		else
		{
			n.next=head;
			head=n;
		}
	}
	
	public void insertbw(int data,int pos)
	{
		if(pos>0)
		{
			Node n=new Node();
			n.data=data;
			n.next=null;
			
			if(pos==1)
			{
				n.next=head;
				head=n;
			}
			else
			{
				Node temp=head;
				int cnt=1;
				while(temp.next!=null && cnt!=pos-1)
				{
					temp=temp.next;
					cnt++;
				}
				n.next=temp.next;
				temp.next=n;
			}
		
		}
		else
		{
			System.out.println("invalid position");
		}
		
	}
	
	public void insertend(int data)
	{
		Node n=new Node();
		n.data=data;
		n.next=null;
		
		if(head==null)  //list is empty
		{
			head=n;
		}
		else
		{
			//traverse the list until end and assign it
			Node temp;
			temp=head;
			while(temp.next!=null)
			{
				temp=temp.next;
			}
			temp.next=n;
		}
	}
	
	public void display()
	{
		Node temp=head;
		while(temp.next!=null)
		{
			System.out.println(temp.data);
			temp=temp.next;
		}
		System.out.println(temp.data);
	}
}
package com.datastructs.LL;

public class LinkedEx1 {

	public static void main(String[] args) {
		LinkedLi ll=new LinkedLi();
		
		ll.insertend(10);
		ll.insertend(20);
		
		ll.insertbegin(5);
		
		ll.insertbw(15,4);
		
		ll.display();

	}

}
