package com.prac.hashmap;
/* 1005. Maximize Sum Of Array After K Negations */
import java.util.Arrays;
import java.util.PriorityQueue;

class Solution3
{
	public int largestSumAfterKNegations(int[] A, int K) {
    int res=0;
    /*Arrays.sort(A);
    int i=0;
    while(K>0)
    {	
    	if(A[i]<0)
    	{
    		A[i]=-A[i];
    		i++;
    	}
    	else if(A[i]>0)
    	{
    		A[i]=-A[i];
    		i++;
    	}
    	Arrays.sort(A);
    	K--;
    }
    for(int j=0;j<A.length;j++)
    {
    	System.out.println(A[j]);
    	res=res+A[j];
    }*/
    
    /* using Priority Queue */
    PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
    for(int i=0;i<A.length;i++)
    {
    	pq.add(A[i]);
    }
    
    while(K-- >0)
    {
    	pq.add(-pq.poll());
    }
    
    while(!pq.isEmpty())
    	res=res+pq.poll();
    return res;
    }
}
public class Ex3 {

	public static void main(String[] args) {
	Solution3 s3=new Solution3();
	int[] A= {-2,9,9,8,4};
	int K=1;
	int res=s3.largestSumAfterKNegations(A, K);
	System.out.println(res);
	}

}
